<?xml version="1.0" encoding="utf-8"?>
<topic id="7f1d5603-4c11-4831-9795-499066021657" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="FormatConverter">
      <title>FormatConverter</title>
      <content>
        <para>
        	The <codeEntityReference>T:Kent.Boogaart.Converters.FormatConverter</codeEntityReference> and
        	<codeEntityReference>T:Kent.Boogaart.Converters.Markup.FormatConverterExtension</codeEntityReference> classes allow you to convert
        	any number of <codeInline>object</codeInline>s to a <codeInline>string</codeInline> by using .NET’s standard formatting capabilities.
        	They accept a single parameter: <codeInline>FormatString</codeInline>, which defines the format for the resultant string.
        </para>
        <para>
        	When binding to a single value it can be used as follows:
<code language="xaml">
<![CDATA[
<TextBox x:Name="_textBox"/>
<Label Content="{Binding Text, ElementName=_textBox, Converter={con:FormatConverter {}Your name is {0}}}"/>
]]>
</code>
        </para>
        <para>
        	Note how the format <codeInline>string</codeInline> passed to the <codeInline>FormatConverter</codeInline> is escaped with "{}",
        	which is necessary because it contains curly brace characters within it. The format string on its own is simply "Your name is {0}".
        </para>
        <para>
        	Binding to multiple values looks like this:
<code language="xaml">
<![CDATA[
<TextBox x:Name="_textBox1"/>
<TextBox x:Name="_textBox2"/>
<Label>
	<Label.Content>
		<MultiBinding Converter="{con:FormatConverter {}You said {0} and {1}.}">
			<Binding Path="Text" ElementName="_textBox1"/>
			<Binding Path="Text" ElementName="_textBox2"/>
		</MultiBinding>
	</Label.Content>
</Label>
]]>
</code>
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>