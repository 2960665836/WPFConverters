<?xml version="1.0" encoding="utf-8"?>
<topic id="eecf8a61-37ae-4a02-ad0f-b00356f1d4ad" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="MapConverter">
      <title>MapConverter</title>
      <content>
        <para>
        	The <codeEntityReference>T:Kent.Boogaart.Converters.MapConverter</codeEntityReference> class (which has no corresponding markup
        	extension) can be used to map one set of values to another. This is an extremely useful converter that has many use cases. Here
        	are some examples:      	
			<list class="bullet">
				<listItem>
					<para>
						Converting enumeration values to human-readable strings prior to display.
					</para>
				</listItem>
				<listItem>
					<para>
						Converting between <codeInline>bool</codeInline> values and <codeInline>Visibility</codeInline> enumeration values.
					</para>
				</listItem>
				<listItem>
					<para>
						Converting between <codeInline>bool</codeInline> values and an <codeInline>ImageSource</codeInline> so the user sees a
						tick or a cross depending on the <codeInline>bool</codeInline> value.
					</para>
				</listItem>
			</list>
        </para>
        <para>
        	The <codeInline>MapConverter</codeInline> works by using a collection of <codeInline>Mapping</codeInline> objects. Each
        	<codeInline>Mapping</codeInline> object specifies a value to map from and a value to map to. The same <codeInline>Mapping</codeInline>
        	objects are used both for forward conversions and backward conversions.
        </para>
        <para>
        	If no relevant <codeInline>Mapping</codeInline> object can be found during a conversion, the <codeInline>MapConverter</codeInline>
        	uses its <codeInline>FallbackBehavior</codeInline> property to decide what to do. You can tell it to either return
        	<codeInline>DependencyProperty.UnsetValue</codeInline> or to return the value it was asked to convert.
        </para>
        <para>
        	An example should make this all clear:
<code language="xaml">
<![CDATA[
<Label>
	<Label.Content>
		<Binding Path="Gender">
			<Binding.Converter>
				<con:MapConverter>
					<con:Mapping From="{x:Static Gender.Male}" To="Guy"/>
					<con:Mapping From="{x:Static Gender.Female}" To="Gal"/>
				</con:MapConverter>
			</Binding.Converter>
		</Binding>
	</Label.Content>
</Label>
]]>
</code>
        </para>
        <para>
        	This example uses a <codeInline>MapConverter</codeInline> to convert from members in a <codeInline>Gender</codeInline> enumeration
        	to either "Guy" or "Gal". Now suppose that the <codeInline>Gender</codeInline> enumeration also defines a value of
        	<codeInline>Unknown</codeInline> (a wise move in these modern times). The above mapping won’t successfully convert values of
        	<codeInline>Unknown</codeInline> – it will just return <codeInline>DependencyProperty.UnsetValue</codeInline> instead.
        </para>
        <para>
        	If you want unknown genders to display as "Unknown" you can either add another <codeInline>Mapping</codeInline> or just tell the
        	<codeInline>MapConverter</codeInline> to return the original value if it cannot map the value it is given:
<code language="xaml">
<![CDATA[
<con:MapConverter FallbackBehavior="ReturnOriginalValue">
	<con:Mapping From="{x:Static Gender.Male}" To="Guy"/>
	<con:Mapping From="{x:Static Gender.Female}" To="Gal"/>
</con:MapConverter>
]]>
</code>
        </para>
        <para>
        	A <codeInline>FallbackBehavior</codeInline> of <codeInline>ReturnOriginalValue</codeInline> is extremely useful where you only want
        	to map a subset of the total possible values.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>