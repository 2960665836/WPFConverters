<?xml version="1.0" encoding="utf-8"?>
<topic id="7874a985-9e29-42ee-aa3e-e8fa0b0c7fdb" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="ExpressionConverter">
      <title>ExpressionConverter</title>
      <content>
        <para>
        	The <codeEntityReference>T:Kent.Boogaart.Converters.ExpressionConverter</codeEntityReference> and
        	<codeEntityReference>T:Kent.Boogaart.Converters.Markup.ExpressionConverterExtension</codeEntityReference> classes allow you to
        	convert one or more bound values by running them through a C#-like expression. The expression uses placeholders of the form
        	<codeInline>{x}</codeInline> to demarcate bound arguments, where <codeInline>x</codeInline> is the argument number starting at
        	zero.
        </para>
        <para>
        	Let’s start with something simple:
<code language="xaml">
<![CDATA[
<Canvas>
	<Slider x:Name="_slider" Width="300" Minimum="1" Maximum="100"/>
	<Rectangle Canvas.Top="20" Fill="Red" Width="100" Height="{Binding Value, ElementName=_slider}"/>
	<Rectangle Canvas.Top="100" Fill="Blue" Width="100" Height="{Binding Value, ElementName=_slider, Converter={con:ExpressionConverter {}{0} * 2}}"/>
</Canvas>
]]>
</code>
		</para>
		<para>
			In this example, the value of the <codeInline>Slider</codeInline> dictates the height of the first rectangle. It also dictates
			the height of the second rectangle, but an <codeInline>ExpressionConverter</codeInline> is used to double the value first.
		</para>
		<para>
			Notice how the expression passed to the <codeInline>ExpressionConverter</codeInline> is escaped with "{}". This is necessary
			because it includes curly brace characters. The expression on its own is simply "{0} * 2". In English, this means "multiply the
			first argument by two".
		</para>
		<para>
			Now, let’s do something a little more complex:
<code language="xaml">
<![CDATA[
<StackPanel x:Name="_panel">
	<Label>What bands do you like?</Label>
	<CheckBox x:Name="_rammstein">Rammstein</Label>
	<CheckBox x:Name="_powderfinger">Powderfinger</Label>
	<CheckBox x:Name="_nickelback">Nickelback</Label>
	<CheckBox x:Name="_ministry">Ministry</Label>
	<Button Content="Let me in!">
		<Button.IsEnabled>
			<MultiBinding Converter="{ExpressionConverter {}{0} &amp;&amp; {1} &amp;&amp; {3} &amp;&amp; !{2}}">
				<Binding Path="IsChecked" ElementName="_rammstein"/>
				<Binding Path="IsChecked" ElementName="_powderfinger"/>
				<Binding Path="IsChecked" ElementName="_nickelback"/>
				<Binding Path="IsChecked" ElementName="_ministry"/>
			</MultiBinding>
		</Button.IsEnabled>
	</Button>
</StackPanel>
]]>
</code>
		</para>
		<para>
			In this example, the entry button is only enabled if the correct combination of bands is chosen. If you don’t like one of the good
			bands or if you <legacyItalic>do</legacyItalic> like the sucky band, you won’t be allowed in.
		</para>
		<para>
			The actual expression has again been escaped due to its presence in XAML. Unescaped, it is simply
			"{0} &amp;&amp; {1} &amp;&amp; {3} &amp;&amp; !{2}". An alternative approach that avoids all this escaping is to use a more
			long-winded syntax in the <codeInline>MultiBinding</codeInline> as follows:
<code language="xaml">
<![CDATA[
<MultiBinding>
	<MultiBinding.Converter>
		<con:ExpressionConverterExtension>
			<con:ExpressionConverterExtension.Expression>
				&lt;![CDATA[
				{0} && {1} && {3} && !{2}
				]]&gt;
			</con:ExpressionConverterExtension.Expression>
		</con:ExpressionConverterExtension>
	</MultiBinding.Converter>
</MultiBinding>
]]>
</code>
		</para>
		<para>
			The <codeInline>ExpressionConverter</codeInline> supports a lot of C# operators and we’ve only scratched the surface of the
			possibilities here. Please see the API documentation for a full list of supported operators.
		</para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>