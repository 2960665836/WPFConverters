<?xml version="1.0" encoding="utf-8"?>
<topic id="97b6062e-594b-419c-9dd1-d07264d10ad9" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <section address="ConverterGroup">
      <title>ConverterGroup</title>
      <content>
        <para>
        	The Binding class only allows you to provide one converter. The
        	<codeEntityReference>T:Kent.Boogaart.Converters.ConverterGroup</codeEntityReference> class allows you to construct a pipeline of
        	converters that can be assigned to a <codeInline>Binding</codeInline>, which essentially annuls this restriction. Here’s an example:
<code language="xaml">
<![CDATA[
<TextBox x:Name="_textBox"/>
<Label>
	<Label.Content>
		<Binding Path="Text" ElementName="_textBox">
			<Binding.Converter>
				<con:ConverterGroup>
					<con:CaseConverter Casing="Upper"/>
					<con:FormatConverter FormatString="In uppercase, you entered ‘{0}’."/>
				</con:ConverterGroup>
			</Binding.Converter>
		</Binding>
	</Label.Content>
</Label>
]]>
</code>
        </para>
        <para>
        	In this example, any input in the <codeInline>TextBox</codeInline> is first converted to uppercase with the
        	<link xlink:href="0f790919-9ce0-4607-870f-8d20f946f847">CaseConverter</link> and then formatted via the
        	<link xlink:href="7f1d5603-4c11-4831-9795-499066021657">FormatConverter</link>. If all converters in the pipeline support backward
        	conversions (not so in this case) then the <codeInline>ConverterGroup</codeInline> will also support backwards conversions.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>