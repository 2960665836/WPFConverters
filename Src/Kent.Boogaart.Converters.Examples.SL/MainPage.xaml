<UserControl
    x:Name="_root"
    x:Class="Kent.Boogaart.Converters.Examples.SL.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Kent.Boogaart.Converters.Examples.SL"
    xmlns:sdk="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"
    xmlns:con="http://schemas.kent.boogaart.com/converters"
    xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:sys2="clr-namespace:System;assembly=System"
    mc:Ignorable="d"
    d:DesignHeight="300" d:DesignWidth="400">
    <sdk:TabControl>
        <sdk:TabItem Header="BooleanToVisibilityConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a BooleanToVisibilityConverter to automatically collapse the TextBox when the CheckBox is unchecked.
                        </TextBlock>
                        <CheckBox x:Name="checkBox1" IsChecked="True">Uncheck to collapse the text box</CheckBox>
                        <TextBox Visibility="{Binding IsChecked, ElementName=checkBox1, Converter={con:BooleanToVisibilityConverter}}"/>
                        <sdk:Label>This label sits below the text box.</sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a BooleanToVisibilityConverter to automatically collapse the TextBox when the CheckBox is checked.
                        </TextBlock>
                        <CheckBox x:Name="checkBox2">Check to collapse the text box</CheckBox>
                        <TextBox Visibility="{Binding IsChecked, ElementName=checkBox2, Converter={con:BooleanToVisibilityConverter IsReversed=True}}"/>
                        <sdk:Label>This label sits below the text box.</sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>
        
        <sdk:TabItem Header="CaseConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                        This example uses a CaseConverter to automatically convert any text you enter in the TextBox to lowercase
                        and uppercase.
                        </TextBlock>
                        <TextBox x:Name="_textBox1" Text="Enter some text here."/>
                        <sdk:Label Content="{Binding Text, ElementName=_textBox1, Converter={con:CaseConverter TargetCasing=Upper}}"/>
                        <sdk:Label Content="{Binding Text, ElementName=_textBox1, Converter={con:CaseConverter TargetCasing=Lower}}"/>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a CaseConverter to ensure entered text is always in lowercase, but the backing property is always in uppercase.
                        </TextBlock>
                        <TextBox x:Name="textBox2" Text="{Binding Text, ElementName=textBlock2, Mode=TwoWay, Converter={con:CaseConverter SourceCasing=Upper, TargetCasing=Lower}}"/>
                        <TextBlock x:Name="textBlock2" Text="This is the backing property."/>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="ConverterGroup">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a ConverterGroup to first convert the entered to uppercase and then to format it.
                        </TextBlock>
                        <TextBox x:Name="_textBox5" Text="Enter some text here"/>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="Text" ElementName="_textBox5">
                                    <Binding.Converter>
                                        <con:ConverterGroup>
                                            <con:CaseConverter TargetCasing="Upper"/>
                                            <con:FormatConverter FormatString="Converted to uppercase, that text is '{0}'."/>
                                        </con:ConverterGroup>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a ConverterGroup to use the entered text to either check or uncheck the CheckBox.
                            Try entering "Yes" or "No" - case insensitive.
                        </TextBlock>
                        <TextBox x:Name="_textBox6"/>
                        <CheckBox IsThreeState="True">
                            <CheckBox.IsChecked>
                                <Binding Path="Text" ElementName="_textBox6" FallbackValue="{x:Null}">
                                    <Binding.Converter>
                                        <con:ConverterGroup>
                                            <con:CaseConverter TargetCasing="Upper"/>
                                            <con:MapConverter>
                                                <con:Mapping From="YES">
                                                    <con:Mapping.To>
                                                        <sys:Boolean>True</sys:Boolean>
                                                    </con:Mapping.To>
                                                </con:Mapping>
                                                <con:Mapping From="NO">
                                                    <con:Mapping.To>
                                                        <sys:Boolean>False</sys:Boolean>
                                                    </con:Mapping.To>
                                                </con:Mapping>
                                            </con:MapConverter>
                                        </con:ConverterGroup>
                                    </Binding.Converter>
                                </Binding>
                            </CheckBox.IsChecked>
                        </CheckBox>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="DateTimeConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a DateTimeConverter to convert a DateTime from UTC format to local time. Click the
                            Button to update the UTC DateTime. NOTE: if you live in a GMT+0 timezone, this example will do
                            nothing (and nor should it).
                        </TextBlock>
                        <Button Click="updateDateTime_Click">Update the UTC DateTime</Button>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>Without conversion:</sdk:Label>
                            <sdk:Label Content="{Binding DateTimeUtc, ElementName=_root}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>With conversion:</sdk:Label>
                            <sdk:Label Content="{Binding DateTimeUtc, ElementName=_root, Converter={con:DateTimeConverter TargetKind=Local}}"/>
                        </StackPanel>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a DateTimeConverter to add 3 minutes onto a DateTime value.
                        </TextBlock>
                        <Button Click="updateDateTime_Click">Update the DateTime</Button>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>Without conversion:</sdk:Label>
                            <sdk:Label Content="{Binding DateTimeUtc, ElementName=_root, Converter={con:DateTimeConverter TargetKind=Local}}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>With conversion:</sdk:Label>
                            <sdk:Label Content="{Binding DateTimeUtc, ElementName=_root, Converter={con:DateTimeConverter TargetKind=Local, TargetAdjustment=0:3}}"/>
                        </StackPanel>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="ExpressionConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses an ExpressionConverter to ensure that the blue rectangle is always double the value
                            of the Slider's value. The red rectangle's width is always exactly equal to the Slider's value.
                        </TextBlock>
                        <Slider x:Name="_slider1" Minimum="1">
                            <Slider.Maximum>
                                <Binding Path="ActualWidth" ElementName="_slider1">
                                    <Binding.Converter>
                                        <con:ExpressionConverter Expression="{}{0} / 2"/>
                                    </Binding.Converter>
                                </Binding>
                            </Slider.Maximum>
                        </Slider>
                        <Canvas Height="120">
                            <Rectangle Fill="Red" Height="50" Width="{Binding Value, ElementName=_slider1}"/>
                            <Rectangle Canvas.Top="60" Fill="Blue" Height="50">
                                <Rectangle.Width>
                                    <Binding Path="Value" ElementName="_slider1">
                                        <Binding.Converter>
                                            <con:ExpressionConverter Expression="{}{0} * 2"/>
                                        </Binding.Converter>
                                    </Binding>
                                </Rectangle.Width>
                            </Rectangle>
                        </Canvas>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="FormatConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a FormatConverter to format your name as entered below.
                        </TextBlock>
                        <StackPanel>
                            <sdk:Label>Enter your name:</sdk:Label>
                            <TextBox x:Name="_textBox2"/>
                        </StackPanel>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="Text" ElementName="_textBox2">
                                    <Binding.Converter>
                                        <con:FormatConverter FormatString="{}Hello {0}!"/>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="MapConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a MapConverter to display a different image depending on whether the CheckBox is checked or not.
                        </TextBlock>
                        <CheckBox x:Name="_checkBox2">Check me</CheckBox>
                        <Image Height="30">
                            <Image.Source>
                                <Binding Path="IsChecked" ElementName="_checkBox2">
                                    <Binding.Converter>
                                        <con:MapConverter>
                                            <con:Mapping To="Tick.png">
                                                <con:Mapping.From>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </con:Mapping.From>
                                            </con:Mapping>
                                            <con:Mapping To="Cross.png">
                                                <con:Mapping.From>
                                                    <sys:Boolean>False</sys:Boolean>
                                                </con:Mapping.From>
                                            </con:Mapping>
                                        </con:MapConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Image.Source>
                        </Image>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>
    </sdk:TabControl>
</UserControl>