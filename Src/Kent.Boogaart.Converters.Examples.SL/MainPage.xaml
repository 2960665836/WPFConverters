<UserControl
    x:Name="_root"
    x:Class="Kent.Boogaart.Converters.Examples.SL.MainPage"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:local="clr-namespace:Kent.Boogaart.Converters.Examples.SL"
    xmlns:sdk="http://schemas.microsoft.com/winfx/2006/xaml/presentation/sdk"
    xmlns:con="http://schemas.kent.boogaart.com/converters"
    xmlns:toolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:sys2="clr-namespace:System;assembly=System"
    mc:Ignorable="d"
    d:DesignHeight="300" d:DesignWidth="400">
    <sdk:TabControl>
        <sdk:TabItem Header="CaseConverter">
            <toolkit:Expander Header="Example 1" IsExpanded="True">
                <StackPanel>
                    <TextBlock Style="{StaticResource ExampleHeader}">
                        This example uses a CaseConverter to automatically convert any text you enter in the TextBox to lowercase
                        and uppercase.
                    </TextBlock>
                    <TextBox x:Name="_textBox1" Text="Enter some text here."/>
                    <sdk:Label>
                        <sdk:Label.Content>
                            <Binding Path="Text" ElementName="_textBox1">
                                <Binding.Converter>
                                    <con:CaseConverter Casing="Upper"/>
                                </Binding.Converter>
                            </Binding>
                        </sdk:Label.Content>
                    </sdk:Label>
                    <sdk:Label>
                        <sdk:Label.Content>
                            <Binding Path="Text" ElementName="_textBox1">
                                <Binding.Converter>
                                    <con:CaseConverter Casing="Lower"/>
                                </Binding.Converter>
                            </Binding>
                        </sdk:Label.Content>
                    </sdk:Label>
                </StackPanel>
            </toolkit:Expander>
        </sdk:TabItem>

        <sdk:TabItem Header="ConverterGroup">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a ConverterGroup to first convert the entered to uppercase and then to format it.
                        </TextBlock>
                        <TextBox x:Name="_textBox5" Text="Enter some text here"/>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="Text" ElementName="_textBox5">
                                    <Binding.Converter>
                                        <con:ConverterGroup>
                                            <con:CaseConverter Casing="Upper"/>
                                            <con:FormatConverter FormatString="Converted to uppercase, that text is '{0}'."/>
                                        </con:ConverterGroup>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a ConverterGroup to use the entered text to either check or uncheck the CheckBox.
                            Try entering "Yes" or "No" - case insensitive.
                        </TextBlock>
                        <TextBox x:Name="_textBox6"/>
                        <CheckBox IsThreeState="True">
                            <CheckBox.IsChecked>
                                <Binding Path="Text" ElementName="_textBox6" FallbackValue="{x:Null}">
                                    <Binding.Converter>
                                        <con:ConverterGroup>
                                            <con:CaseConverter Casing="Upper"/>
                                            <con:MapConverter>
                                                <con:Mapping From="YES">
                                                    <con:Mapping.To>
                                                        <sys:Boolean>True</sys:Boolean>
                                                    </con:Mapping.To>
                                                </con:Mapping>
                                                <con:Mapping From="NO">
                                                    <con:Mapping.To>
                                                        <sys:Boolean>False</sys:Boolean>
                                                    </con:Mapping.To>
                                                </con:Mapping>
                                            </con:MapConverter>
                                        </con:ConverterGroup>
                                    </Binding.Converter>
                                </Binding>
                            </CheckBox.IsChecked>
                        </CheckBox>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 3">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example first converts the entered text to a DateTime and then adds 10 minutes to it. Finally,
                            the result is formatted with a FormatConverter.
                        </TextBlock>
                        <TextBox x:Name="_textBox7"/>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="Text" ElementName="_textBox7">
                                    <Binding.Converter>
                                        <con:ConverterGroup>
                                            <con:TypeConverter TargetType="{Binding DateTimeType, Source={StaticResource TypeProvider}}"/>
                                            <con:DateTimeConverter TargetAdjustment="0:10"/>
                                            <con:FormatConverter FormatString="Adding 10 minutes to that we get a time of '{0:t}'."/>
                                        </con:ConverterGroup>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="DateTimeConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a DateTimeConverter to convert a DateTime from UTC format to local time. Click the
                            Button to update the UTC DateTime. NOTE: if you live in a GMT+0 timezone, this example will do
                            nothing (and nor should it).
                        </TextBlock>
                        <Button Click="updateDateTime_Click">Update the UTC DateTime</Button>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>Without conversion:</sdk:Label>
                            <sdk:Label Content="{Binding DateTimeUtc, ElementName=_root}"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>With conversion:</sdk:Label>
                            <sdk:Label>
                                <sdk:Label.Content>
                                    <Binding Path="DateTimeUtc" ElementName="_root">
                                        <Binding.Converter>
                                            <con:DateTimeConverter TargetKind="Local"/>
                                        </Binding.Converter>
                                    </Binding>
                                </sdk:Label.Content>
                            </sdk:Label>
                        </StackPanel>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a DateTimeConverter to add 3 minutes onto a DateTime value.
                        </TextBlock>
                        <Button Click="updateDateTime_Click">Update the DateTime</Button>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>Without conversion:</sdk:Label>
                            <sdk:Label>
                                <sdk:Label.Content>
                                    <Binding Path="DateTimeUtc" ElementName="_root">
                                        <Binding.Converter>
                                            <con:DateTimeConverter TargetKind="Local"/>
                                        </Binding.Converter>
                                    </Binding>
                                </sdk:Label.Content>
                            </sdk:Label>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal">
                            <sdk:Label>With conversion:</sdk:Label>
                            <sdk:Label>
                                <sdk:Label.Content>
                                    <Binding Path="DateTimeUtc" ElementName="_root">
                                        <Binding.Converter>
                                            <con:DateTimeConverter TargetKind="Local" TargetAdjustment="0:3"/>
                                        </Binding.Converter>
                                    </Binding>
                                </sdk:Label.Content>
                            </sdk:Label>
                        </StackPanel>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="ExpressionConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses an ExpressionConverter to ensure that the blue rectangle is always double the value
                            of the Slider's value. The red rectangle's width is always exactly equal to the Slider's value.
                        </TextBlock>
                        <Slider x:Name="_slider1" Minimum="1">
                            <Slider.Maximum>
                                <Binding Path="ActualWidth" ElementName="_slider1">
                                    <Binding.Converter>
                                        <con:ExpressionConverter Expression="{}{0} / 2"/>
                                    </Binding.Converter>
                                </Binding>
                            </Slider.Maximum>
                        </Slider>
                        <Canvas Height="120">
                            <Rectangle Fill="Red" Height="50" Width="{Binding Value, ElementName=_slider1}"/>
                            <Rectangle Canvas.Top="60" Fill="Blue" Height="50">
                                <Rectangle.Width>
                                    <Binding Path="Value" ElementName="_slider1">
                                        <Binding.Converter>
                                            <con:ExpressionConverter Expression="{}{0} * 2"/>
                                        </Binding.Converter>
                                    </Binding>
                                </Rectangle.Width>
                            </Rectangle>
                        </Canvas>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="FormatConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a FormatConverter to format your name as entered below.
                        </TextBlock>
                        <StackPanel>
                            <sdk:Label>Enter your name:</sdk:Label>
                            <TextBox x:Name="_textBox2"/>
                        </StackPanel>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="Text" ElementName="_textBox2">
                                    <Binding.Converter>
                                        <con:FormatConverter FormatString="{}Hello {0}!"/>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="MapConverter">
            <StackPanel>
                <toolkit:Expander Header="Example 1" IsExpanded="True">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a MapConverter to convert between Boolean and Visibility. Checking the CheckBox
                            displays a Label; unchecking it hides the Label.
                        </TextBlock>
                        <CheckBox x:Name="_checkBox1">Show Label</CheckBox>
                        <sdk:Label Content="Here is the label.">
                            <sdk:Label.Visibility>
                                <Binding Path="IsChecked" ElementName="_checkBox1" FallbackValue="Collapsed">
                                    <Binding.Converter>
                                        <con:MapConverter>
                                            <con:Mapping To="{Binding Visible, Source={StaticResource ValueProvider}}">
                                                <con:Mapping.From>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </con:Mapping.From>
                                            </con:Mapping>
                                        </con:MapConverter>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Visibility>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 2">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a MapConverter to convert between the selected UriFormat enumeration member and a
                            human-readable string.
                        </TextBlock>
                        <ComboBox x:Name="_comboBox1"/>
                        <sdk:Label>
                            <sdk:Label.Content>
                                <Binding Path="SelectedValue" ElementName="_comboBox1">
                                    <Binding.Converter>
                                        <con:MapConverter FallbackBehavior="ReturnOriginalValue">
                                            <con:Mapping From="{Binding SafeUnescaped, Source={StaticResource ValueProvider}}" To="Unescaped but safe"/>
                                            <con:Mapping From="{Binding UriEscaped, Source={StaticResource ValueProvider}}" To="Escaped"/>
                                        </con:MapConverter>
                                    </Binding.Converter>
                                </Binding>
                            </sdk:Label.Content>
                        </sdk:Label>
                    </StackPanel>
                </toolkit:Expander>
                <toolkit:Expander Header="Example 3">
                    <StackPanel>
                        <TextBlock Style="{StaticResource ExampleHeader}">
                            This example uses a MapConverter to display a different image depending on whether the CheckBox is
                            checked or not.
                        </TextBlock>
                        <CheckBox x:Name="_checkBox2">Check me</CheckBox>
                        <Image Height="30">
                            <Image.Source>
                                <Binding Path="IsChecked" ElementName="_checkBox2">
                                    <Binding.Converter>
                                        <con:MapConverter>
                                            <con:Mapping To="Tick.png">
                                                <con:Mapping.From>
                                                    <sys:Boolean>True</sys:Boolean>
                                                </con:Mapping.From>
                                            </con:Mapping>
                                            <con:Mapping To="Cross.png">
                                                <con:Mapping.From>
                                                    <sys:Boolean>False</sys:Boolean>
                                                </con:Mapping.From>
                                            </con:Mapping>
                                        </con:MapConverter>
                                    </Binding.Converter>
                                </Binding>
                            </Image.Source>
                        </Image>
                    </StackPanel>
                </toolkit:Expander>
            </StackPanel>
        </sdk:TabItem>

        <sdk:TabItem Header="TypeConverter">
            <sdk:Label>Please see the third ConverterGroup example.</sdk:Label>
        </sdk:TabItem>
    </sdk:TabControl>
</UserControl>